Make compatible with older GnuTLS versions

Use the interactive method to give passwords to certtool to support both
new and older version of GnuTLS. This is of interest to support running
swtpm on RHEL7. This change has a side effect benefit of no longer
writing passwords to disk.

Older versions of GnuTLS (before GnuTLS commit c5791c82c663) expect that
the type in the URI specified when using "--load-privkey" is private so
fix up the generated URI in the tests. Newer versions of GnuTLS are less fussy
so they work too.

Signed-off-by: Ross Lagerwall <ross.lagerwall@citrix.com>

diff --git a/configure.ac b/configure.ac
index ccae445..08acf92 100644
--- a/configure.ac
+++ b/configure.ac
@@ -303,14 +303,6 @@ if test "x$with_gnutls" != "xno"; then
             with_gnutls=no
         fi
     fi
-    dnl certtool changed how it takes private key passwords
-    dnl 3.3.29 is too old (RHEL 7); we need at least gnutls 3.4.0
-    AC_MSG_CHECKING([for gnutls 3.4.0 or later])
-    $(pkg-config gnutls --atleast-version=3.4.0)
-    if test $? -ne 0; then
-        AC_MSG_ERROR([gnutls 3.4.0 is required])
-    fi
-    AC_MSG_RESULT([yes])
 fi
 
 if test "x$with_gnutls" != "xno"; then
@@ -564,6 +556,9 @@ if test "$with_seccomp" != "no"; then
                      [whether to build in seccomp profile (Linux only)])
 fi
 
+AC_SEARCH_LIBS(forkpty, util bsd, LOCALCA_LIBS="$ac_cv_search_forkpty")
+AC_SUBST([LOCALCA_LIBS])
+
 MY_CFLAGS="$CFLAGS"
 MY_LDFLAGS="$LDFLAGS"
 AC_SUBST([MY_CFLAGS])
@@ -622,6 +617,7 @@ echo " JSON_GLIB_CFLAGS = $JSON_GLIB_CFLAGS"
 echo "   JSON_GLIB_LIBS = $JSON_GLIB_LIBS"
 echo "      GLIB_CFLAGS = $GLIB_CFLAGS"
 echo "        GLIB_LIBS = $GLIB_LIBS"
+echo "     LOCALCA_LIBS = $LOCALCA_LIBS"
 echo
 echo "TSS_USER=$TSS_USER"
 echo "TSS_GROUP=$TSS_GROUP"
diff --git a/src/swtpm_localca/Makefile.am b/src/swtpm_localca/Makefile.am
index 72a6213..72aafce 100644
--- a/src/swtpm_localca/Makefile.am
+++ b/src/swtpm_localca/Makefile.am
@@ -31,6 +31,7 @@ swtpm_localca_LDFLAGS = \
 	-L$(top_builddir)/src/utils -lswtpm_utils \
 	$(MY_LDFLAGS) \
 	$(GLIB_LIBS) \
+	$(LOCALCA_LIBS) \
 	$(HARDENING_LDFLAGS)
 
 swtpm_localca_SOURCES = \
diff --git a/src/swtpm_localca/swtpm_localca.c b/src/swtpm_localca/swtpm_localca.c
index 089e4e0..dcf7094 100644
--- a/src/swtpm_localca/swtpm_localca.c
+++ b/src/swtpm_localca/swtpm_localca.c
@@ -12,6 +12,8 @@
 #include <errno.h>
 #include <fcntl.h>
 #include <getopt.h>
+#include <poll.h>
+#include <pty.h>
 #include <pwd.h>
 #include <regex.h>
 #include <stdio.h>
@@ -21,6 +23,7 @@
 #include <sys/file.h>
 #include <sys/stat.h>
 #include <sys/types.h>
+#include <sys/wait.h>
 
 #include <glib.h>
 
@@ -68,28 +71,153 @@ static int init(gchar **options_file, gchar **config_file)
 /* Run the certtool command line prepared in cmd. Display error message
  * in case of failure and also display the keyfile if something goes wrong.
  */
-static int run_certtool(gchar **cmd, gchar **env, const char *msg, gchar *keyfile)
+static int run_certtool(gchar **cmd, gchar **env, const char *msg, gchar *keyfile, gchar **passwords)
 {
     g_autofree gchar *standard_error = NULL;
-    gint exit_status;
-    GError *error = NULL;
-    gboolean success;
+    size_t bufused = 0, buflen = 0;
+    ssize_t len;
+    int status, ret;
+    int errpipe[2] = {-1, -1};
+    int mfd = -1;
+    pid_t pid;
+
+    ret = pipe(errpipe);
+    if (ret == -1) {
+        logerr(gl_LOGFILE, "%s", msg);
+        logerr(gl_LOGFILE, "pipe failed: %s\n", strerror(errno));
+        goto error;
+    }
+
+    pid = forkpty(&mfd, NULL, NULL, NULL);
+    if (pid == -1) {
+        logerr(gl_LOGFILE, "%s", msg);
+        logerr(gl_LOGFILE, "forkpty failed: %s\n", strerror(errno));
+        goto error;
+    } else if (pid == 0) {
+        if (close(0) == -1 || close(1) == -1 || close(2) == -1)
+            exit(127);
+
+        /* stdin to /dev/null */
+        if (open("/dev/null", O_RDONLY) == -1)
+            exit(127);
+
+        /* stdout to /dev/null */
+        if (open("/dev/null", O_WRONLY) == -1)
+            exit(127);
+
+        /* pipe to stderr */
+        if (dup2(errpipe[1], 2) == -1)
+            exit(127);
+
+        if (close(errpipe[0]) == -1 || close(errpipe[1]) == -1)
+            exit(127);
+
+        execve(cmd[0], cmd, env);
+        exit(127);
+    }
+
+    close(errpipe[1]);
+    errpipe[1] = -1;
+
+    for (;;) {
+        struct pollfd pollfds[2] = {{errpipe[0], POLLIN, 0}, {mfd, POLLIN, 0}};
+
+        ret = poll(pollfds, 2, 0);
+        if (ret == -1 && errno != EINTR) {
+            logerr(gl_LOGFILE, "%s", msg);
+            logerr(gl_LOGFILE, "poll failed: %s\n", strerror(errno));
+            goto error;
+        }
+
+        if ((pollfds[0].revents & POLLIN)) {
+            if (buflen - bufused == 0) {
+                buflen = buflen > 0 ? buflen * 2 : 1024;
+                standard_error = g_realloc(standard_error, buflen);
+                if (!standard_error) {
+                    logerr(gl_LOGFILE, "%s", msg);
+                    logerr(gl_LOGFILE, "Allocation failed: %s\n", strerror(errno));
+                    goto error;
+                }
+            }
+
+            len = read(errpipe[0], standard_error, buflen - bufused);
+            if (len == 0)
+                break;
+            if (len == -1 && errno != EINTR) {
+                logerr(gl_LOGFILE, "%s", msg);
+                logerr(gl_LOGFILE, "Read stderr failed: %s\n", strerror(errno));
+                goto error;
+            }
+            if (len > 0)
+                bufused += len;
+        }
+        if ((pollfds[0].revents & POLLHUP))
+            break;
 
-    success = g_spawn_sync(NULL, cmd, env, G_SPAWN_STDOUT_TO_DEV_NULL, NULL, NULL,
-                           NULL, &standard_error, &exit_status, &error);
-    if (!success || exit_status != 0) {
-        logerr(gl_LOGFILE, "%s" , msg);
+        if ((pollfds[1].revents & POLLIN)) {
+            unsigned char tmpbuf[32];
+
+            len = read(mfd, tmpbuf, sizeof(tmpbuf));
+            if (len == 0)
+                break;
+            if (len == -1) {
+                if (errno == EINTR)
+                    continue;
+
+                logerr(gl_LOGFILE, "%s", msg);
+                logerr(gl_LOGFILE, "Read tty failed: %s\n", strerror(errno));
+                goto error;
+            }
+
+            /* Wait for "Enter password:" */
+            if (!memchr(tmpbuf, ':', len))
+                continue;
+
+            if (*passwords) {
+                if (write_full(mfd, *passwords, strlen(*passwords)) == -1 ||
+                        write_full(mfd, "\r\n", 2) == -1) {
+                    logerr(gl_LOGFILE, "%s", msg);
+                    logerr(gl_LOGFILE, "Write password failed: %s\n", strerror(errno));
+                    goto error;
+                }
+                passwords++;
+            } else {
+                logerr(gl_LOGFILE, "%s", msg);
+                logerr(gl_LOGFILE, "Expected password\n");
+                goto error;
+            }
+        }
+    }
+
+    if (standard_error && bufused == buflen)
+        standard_error[bufused - 1] = '\0';
+    else if (standard_error)
+        standard_error[bufused] = '\0';
+
+    waitpid(pid, &status, 0);
+
+    close(errpipe[0]);
+    close(mfd);
+
+    if ((WIFEXITED(status) && WEXITSTATUS(status)) || WIFSIGNALED(status)) {
+        status = WIFEXITED(status) ? WEXITSTATUS(status) : -WTERMSIG(status);
+        logerr(gl_LOGFILE, "%s", msg);
         if (keyfile)
             logerr(gl_LOGFILE, " %s:", keyfile);
-        if (!success) {
-            logerr(gl_LOGFILE, "%s\n", error->message);
-            g_error_free(error);
-        } else {
-            logerr(gl_LOGFILE, "%s\n", standard_error);
-        }
+        logerr(gl_LOGFILE, "Exit status: %d\n", status);
+        logerr(gl_LOGFILE, "%s\n", standard_error);
         return 1;
     }
     return 0;
+
+error:
+    if (errpipe[0] >= 0)
+        close(errpipe[0]);
+    if (errpipe[1] >= 0)
+        close(errpipe[1]);
+    if (mfd >= 0)
+        close(mfd);
+    return 1;
 }
 
 /* Create a root CA key and cert and a local CA key and cert. The latter will be
@@ -124,8 +252,8 @@ static int create_localca_cert(const gchar *lockfile, const gchar *statedir,
         const gchar *swtpm_rootca_password = g_getenv("SWTPM_ROOTCA_PASSWORD");
         g_autofree gchar *certtool = g_find_program_in_path(CERTTOOL_NAME);
         g_autofree gchar **cmd = NULL;
-        g_autofree gchar *fc = NULL;
         const char *filecontent;
+        gchar *passwords[3] = {NULL};
 
         if (certtool == NULL) {
             logerr(gl_LOGFILE, "Could not find %s in PATH.\n", CERTTOOL_NAME);
@@ -140,7 +268,8 @@ static int create_localca_cert(const gchar *lockfile, const gchar *statedir,
             cmd = concat_arrays(cmd, (gchar*[]){
                                    "--password", (gchar *)swtpm_rootca_password, NULL
                                 }, TRUE);
-        if (run_certtool(cmd, certtool_env, "Could not create root-CA key", cakey))
+        if (run_certtool(cmd, certtool_env, "Could not create root-CA key", cakey,
+                passwords))
             goto error;
 
         if (chmod(cakey, S_IRUSR | S_IWUSR | S_IRGRP) != 0) {
@@ -168,14 +297,16 @@ static int create_localca_cert(const gchar *lockfile, const gchar *statedir,
                                 "--template", template1_file,
                                 "--outfile", cacert,
                                 "--load-privkey", cakey,
+                                "--ask-pass",
                                 NULL
                             }, FALSE);
-        if (swtpm_rootca_password != NULL)
-            certtool_env = g_environ_setenv(certtool_env, "GNUTLS_PIN", swtpm_rootca_password, TRUE);
+        passwords[0] = (gchar *)swtpm_rootca_password;
 
-        if (run_certtool(cmd, certtool_env, "Could not create root-CA:", NULL))
+        if (run_certtool(cmd, certtool_env, "Could not create root-CA:", NULL,
+                (gchar *[]){(gchar *)swtpm_rootca_password, NULL}))
             goto error;
 
+        passwords[0] = NULL;
         g_free(cmd);
 
         /* create the intermediate CA's key */
@@ -187,7 +318,7 @@ static int create_localca_cert(const gchar *lockfile, const gchar *statedir,
             cmd = concat_arrays(cmd, (gchar *[]){
                                     "--password", (gchar *)signkey_password, NULL},
                                 TRUE);
-        if (run_certtool(cmd, certtool_env, "Could not create local-CA key", cakey))
+        if (run_certtool(cmd, certtool_env, "Could not create local-CA key", cakey, passwords))
             goto error;
 
         if (chmod(signkey, S_IRUSR | S_IWUSR | S_IRGRP) != 0) {
@@ -199,13 +330,9 @@ static int create_localca_cert(const gchar *lockfile, const gchar *statedir,
                       "ca\n"
                       "cert_signing_key\n"
                       "expiration_days = -1\n";
-        if (swtpm_rootca_password != NULL && signkey_password != NULL)
-            fc = g_strdup_printf("%spassword = %s\n", filecontent, swtpm_rootca_password);
-        else
-            fc = g_strdup(filecontent);
 
         template2_file_fd = write_to_tempfile(&template2_file,
-                                              (const unsigned char *)fc, strlen(fc));
+                                              (const unsigned char *)filecontent, strlen(filecontent));
         if (template2_file_fd < 0)
             goto error;
 
@@ -219,14 +346,20 @@ static int create_localca_cert(const gchar *lockfile, const gchar *statedir,
                                 "--load-privkey", (gchar *)signkey,
                                 "--load-ca-privkey", cakey,
                                 "--load-ca-certificate", cacert,
+                                "--ask-pass",
                                 NULL
                             }, FALSE);
-        if (signkey_password != NULL)
-            certtool_env = g_environ_setenv(certtool_env, "GNUTLS_PIN", signkey_password, TRUE);
-        else if (swtpm_rootca_password != NULL)
-            certtool_env = g_environ_setenv(certtool_env, "GNUTLS_PIN", swtpm_rootca_password, TRUE);
 
-        if (run_certtool(cmd, certtool_env, "Could not create local-CA:", NULL))
+        if (swtpm_rootca_password && !signkey_password) {
+            passwords[0] = (gchar *)swtpm_rootca_password;
+        } else if (!swtpm_rootca_password && signkey_password) {
+            passwords[0] = (gchar *)signkey_password;
+        } else {
+            passwords[0] = (gchar *)swtpm_rootca_password;
+            passwords[1] = (gchar *)signkey_password;
+        }
+
+        if (run_certtool(cmd, certtool_env, "Could not create local-CA:", NULL, passwords))
             goto error;
     }
 
diff --git a/src/utils/swtpm_utils.c b/src/utils/swtpm_utils.c
index 0a28c62..599861f 100644
--- a/src/utils/swtpm_utils.c
+++ b/src/utils/swtpm_utils.c
@@ -440,3 +440,34 @@ int check_directory_access(const gchar *directory, int mode, const struct passwd
     }
     return 0;
 }
+
+/*
+ * write_full: Write all bytes of a buffer into the file descriptor
+ *             and handle partial writes on the way.
+ *
+ * @fd: file descriptor to write to
+ * @buffer: buffer
+ * @buflen: length of buffer
+ *
+ * Returns -1 in case not all bytes could be transferred, number of
+ * bytes written otherwise (must be equal to buflen).
+ */
+ssize_t write_full(int fd, const void *buffer, size_t buflen)
+{
+    size_t written = 0;
+    ssize_t n;
+
+    while (written < buflen) {
+        n = write(fd, buffer, buflen - written);
+        if (n == 0)
+            return -1;
+        if (n < 0) {
+            if (errno == EINTR)
+                continue;
+            return -1;
+        }
+        written += n;
+        buffer += n;
+    }
+    return written;
+}
diff --git a/src/utils/swtpm_utils.h b/src/utils/swtpm_utils.h
index 70a0e4e..60fdf1e 100644
--- a/src/utils/swtpm_utils.h
+++ b/src/utils/swtpm_utils.h
@@ -43,4 +43,6 @@ gchar *str_replace(const char *in, const char *torep, const char *rep);
 
 int check_directory_access(const gchar *directory, int mode, const struct passwd *curr_user);
 
+ssize_t write_full(int fd, const void *buffer, size_t buflen);
+
 #endif /* SWTPM_UTILS_H */
diff --git a/tests/test_tpm2_swtpm_localca_pkcs11.test b/tests/test_tpm2_swtpm_localca_pkcs11.test
index c81989d..6c81ed9 100755
--- a/tests/test_tpm2_swtpm_localca_pkcs11.test
+++ b/tests/test_tpm2_swtpm_localca_pkcs11.test
@@ -55,7 +55,7 @@ if [ $? -ne 0 ]; then
 	echo "softhsm needs to be v2.3.0 or greater and pkcs11 correctly configured"
 	exit 77
 fi
-pkcs11uri=$(echo ${msg} | sed -n 's|^keyuri: \(.*\)|\1|p')
+pkcs11uri=$(echo ${msg} | sed -n 's|^keyuri: \(.*\)|\1|p' | sed 's/;type=public/;type=private/')
 
 # Now we need to create the root CA ...
 template=${workdir}/template
